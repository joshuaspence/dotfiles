#===============================================================================
# zshrc
#===============================================================================

## @link https://github.com/mikemcquaid/dotfiles

# load shared shell configuration
source ~/.shrc

# Enable completions
autoload -U compinit && compinit

if quiet_which brew
then
    [ ! -f $BREW_PREFIX/share/zsh/site-functions/_brew ] && \
        mkdir -p $BREW_PREFIX/share/zsh/site-functions &>/dev/null && \
        ln -s $BREW_PREFIX/Library/Contributions/brew_zsh_completion.zsh \
              $BREW_PREFIX/share/zsh/site-functions/_brew
    export FPATH="$BREW_PREFIX/share/zsh/site-functions:$FPATH"
fi

# Enable regex moving
autoload -U zmv

# Style ZSH output
zstyle ':completion:*:descriptions' format '%U%B%F{red}%d%f%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Case insensitive globbing
setopt no_case_glob

# Don't show duplicate history entires
setopt hist_find_no_dups

# Remove unnecessary blanks from history
setopt hist_reduce_blanks

# Share history between instances
setopt share_history

# Don't hang up background jobs
setopt no_hup

# Expand parameters, commands and aritmatic in prompts
setopt prompt_subst

# Colorful prompt with Git and Subversion branch
autoload -U colors && colors

## @link https://github.com/paulmillr/dotfiles/blob/master/home/zshrc.sh
autoload -Uz promptinit && promptinit


## @link https://github.com/dlh01/dotfiles/blob/master/zsh/zshrc

# Enable advanced tab-completion
autoload -Uz compinit
compinit

# Enable autocorrect
setopt correctall

# Enable advanced prompts
autoload -Uz promptinit
promptinit

# Enable gathering of VCS information for Git and SVN
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' check-for-changes true # potential performance drag
setopt prompt_subst

# Customize the prompt
export PROMPT='%~ : ) '
export RPROMPT='${vcs_info_msg_0_}'

# Enable autocd
setopt autocd

# Enable extended globbing
setopt extendedglob

# Keep 10000 lines of history within the shell and save them to ~/.zsh_history:
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
# Write the history file in the ':start:elapsed;command' format
setopt EXTENDED_HISTORY
# Write to the history file immediately, not when the shell exits
setopt INC_APPEND_HISTORY
# Share history between all sessions
setopt SHARE_HISTORY
# Expire a duplicate event first when trimming history
setopt HIST_EXPIRE_DUPS_FIRST
# Do not record an event that was just recorded again
setopt HIST_IGNORE_DUPS
# Delete an old recorded event if a new event is a duplicate
setopt HIST_IGNORE_ALL_DUPS
# Do not record an event starting with a space
setopt HIST_IGNORE_SPACE
# Do not execute immediately upon history expansion
setopt HIST_VERIFY

# Write a home folder-based `cd` command from any directory
CDPATH=~

# Allow autocompletions based on substrings
if [ "x$CASE_SENSITIVE" = "xtrue" ]; then
  zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
  unset CASE_SENSITIVE
else
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
fi

# Use vi keybindings
bindkey -v

# Use Ctrl-r for incremental history searches
bindkey '^r' history-incremental-search-backward

# emacs-style keybindings for jumping to line endings or beginnings
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

# OSX-style keybindings for jumping to line endings or beginnings
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

# vim is our editor
export EDITOR=vim

# Makes a directory and changes to it.
function mkdcd {
  [[ -n "$1" ]] && mkdir -p "$1" && builtin cd "$1"
}

# Bind Fn+Delete to forward-delete
bindkey "^[[3~" delete-char

# Expand .... to ../..
function expand-dot-to-parent-directory-path {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+='/..'
  else
    LBUFFER+='.'
  fi
}
zle -N expand-dot-to-parent-directory-path
bindkey "." expand-dot-to-parent-directory-path

# Source autojump
[[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh

# Start an HTTP server from a directory, optionally specifying the port
server() {
    # Get port (if specified)
    local port="${1:-8000}"

    # Open in the browser
    open "http://localhost:${port}/"

    # Redefining the default content-type to text/plain instead of the default
    # application/octet-stream allows "unknown" files to be viewable in-browser
    # as text instead of being downloaded.
    #
    # Unfortunately, "python -m SimpleHTTPServer" doesn't allow you to redefine
    # the default content-type, but the SimpleHTTPServer module can be executed
    # manually with just a few lines of code.
    python -c $'import SimpleHTTPServer;\nSimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map[""] = "text/plain";\nSimpleHTTPServer.test();' "$port"
}

# Sets the terminal window title.
function set-terminal-window-title {
  if [[ "$TERM" == ((x|a|ml|dt|E)term*|(u|)rxvt*) ]]; then
    printf "\e]2;%s\a" ${(V)argv}
  fi
}

# Sets the terminal tab title.
function set-terminal-tab-title {
  if [[ "$TERM" == ((x|a|ml|dt|E)term*|(u|)rxvt*) ]]; then
    printf "\e]1;%s\a" ${(V)argv}
  fi
}

# Sets the tab and window titles with a given path.
function set-titles-with-path {
  emulate -L zsh
  setopt EXTENDED_GLOB

  local absolute_path="${${1:a}:-$PWD}"

  if [[ "$TERM_PROGRAM" == 'Apple_Terminal' ]]; then
    printf '\e]7;%s\a' "file://$HOST${absolute_path// /%20}"
  else
    local abbreviated_path="${absolute_path/#$HOME/~}"
    local truncated_path="${abbreviated_path/(#m)?(#c15,)/...${MATCH[-12,-1]}}"
    unset MATCH

    if [[ "$TERM" == screen* ]]; then
      set-screen-window-title "$truncated_path"
    else
      set-terminal-window-title "$abbreviated_path"
      set-terminal-tab-title "$truncated_path"
    fi
  fi
}

# Node and modules path
# http://shaw.al.s3.amazonaws.com/nicar13/nicar-2013-node.html
export NODE_PATH="/usr/local/lib/node: \
      /usr/local/lib/node_modules: \
      /usr/local/share/npm/lib/node_modules"

# Help wp-cli work with MAMP
export WP_CLI_PHP=/Applications/MAMP/bin/php/php5.4.10/bin/php

# Source history-substring-search
source ~/dotfiles/zsh/history-substring-search/zsh-history-substring-search.zsh

# Do just before presenting the prompt
precmd () {
  vcs_info
  set-titles-with-path
}

## @link https://github.com/skwp/dotfiles/tree/master/zsh
## @link https://github.com/mt3/dotfiles/tree/master/.dotfiles/zsh
## @link https://github.com/jacobwg/dotfiles/tree/master/zsh
## @link https://github.com/jacobwg/dotfiles/tree/master/system
## @link https://github.com/tpope/tpope

#===============================================================================
# zshenv
#===============================================================================
## @link https://github.com/paulmillr/dotfiles/blob/master/home/zshenv.sh

# Less.
# -----
# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

# Paths.
# ------
typeset -gU cdpath fpath mailpath manpath path
typeset -gUT INFOPATH infopath

# Set the the list of directories that cd searches.
cdpath=(
  $cdpath
)

# Set the list of directories that info searches for manuals.
infopath=(
  /usr/local/share/info
  /usr/share/info
  $infopath
)

# Set the list of directories that man searches for manuals.
manpath=(
  /usr/local/share/man
  /usr/share/man
  $manpath
)

for path_file in /etc/manpaths.d/*(.N); do
  manpath+=($(<$path_file))
done
unset path_file

# Set the list of directories that Zsh searches for programs.
path=(
  /usr/local/{bin,sbin}
  /usr/local/share/{python,python3}
  /usr/local/share/npm/bin
  /usr/{bin,sbin}
  /{bin,sbin}
  $path
)

for path_file in /etc/paths.d/*(.N); do
  path+=($(<$path_file))
done
unset path_file

# Temporary Files.
if [[ -d "$TMPDIR" ]]; then
  export TMPPREFIX="${TMPDIR%/}/zsh"
  if [[ ! -d "$TMPPREFIX" ]]; then
    mkdir -p "$TMPPREFIX"
  fi
fi
