#!/bin/bash

#/
## Create a new branch named pointed at HEAD and reset the current branch to the
## the head of its tracking branch. This is useful when working on master and
## you realize you should be on a topic branch.
##
## @link https://github.com/jacobwg/dotfiles/blob/master/bin/git-cut-branch
#\

#| Usage: git-cut-branch <name>
#|
#| Create a new branch named <name> pointed at HEAD and reset the current branch to
#| the head of its tracking branch. This is useful when working on master and you
#| realize you should be on a topic branch.

set -e

# Write a short SHA for the given SHA.
function shortsha() {
    echo "$1" | cut -c1-7
}

# Show usage.
if [[ $# == 0 || "$1" == '-h' || "$1" == '--help' ]]; then
    cat "$0" |
    grep '^#|' |
    cut -c4-

    if [[ "$1" == '-h' || "$1" == '--help' ]]; then
        exit 0
    else
        exit 1
    fi
fi

# First argument is the new branch name.
branch="$1"

# Get the current branch for HEAD in "refs/heads/<branch>" form.
ref=$(git symbolic-ref -q HEAD)
sha=$(git rev-parse HEAD)

if [[ -z $ref ]]; then
    echo "You're not on a branch" >&2
    exit 2
fi

# Just the branch name please.
current=$(echo "${ref}" |sed 's@^refs/heads/@@')

if [[ -z $current ]]; then
    echo "You're in a weird place... get on a local branch!" >&2
    exit 3
fi

# Figure out what branch we're currently tracking.
remote=$(git config --get "branch.$current.remote" || true)
merge=$(git config --get "branch.$current.merge" | sed 's@refs/heads/@@')

# Build up a sane "<remote>/<branch>" name.
if [[ $remote && $merge ]]; then
    tracking="${remote}/${merge}"
elif [[ $merge ]]; then
    tracking="${merge}"
else
    echo "${current} is not tracking anything" >&2
    exit 4
fi

# Make sure there's no changes before we reset hard.
if ! git diff-index --quiet --cached HEAD || ! git diff-files --quiet; then
    echo "Cannot cut branch with changes to index or working directory" >&2
    exit 5
fi

# Reset the current branch to its tracking branch, create the new branch also
# tracking the original branch, and switch to it.
git branch "${branch}"
git reset -q --hard "${tracking}"
git checkout -q "${branch}"
git branch --set-upstream "${branch}" "${tracking}"
git reset -q --hard "${sha}"

echo "[$(shortsha "${sha}")...$(shortsha $(git rev-parse ${tracking}))] ${current}"
echo "[0000000...$(shortsha $(git rev-parse HEAD))] ${branch}"
