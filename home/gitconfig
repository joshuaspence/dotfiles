#/
## Configuration file for {@link http://git-scm.com/ git}.
##
## @author Joshua Spence
## @file   ~/.gitconfig
##
## @link   http://git.wiki.kernel.org/index.php/Aliases
## @link   http://github.com/jacobwg/dotfiles/blob/master/bin/git-conflicts
## @link   http://github.com/cypher/dotfiles/blob/master/gitconfig
## @link   http://github.com/defunkt/hub
## @link   http://github.com/rtomayko/git-sh git-sh
## @link   http://github.com/visionmedia/git-extras
## @link   http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
#\

[include]
    path = ~/.gituser

[advice]
    ## Advice shown when `git-push` refuses non-fast-forward refs. Default is
    ## true.
    pushNonFastForward = true

    ## Directions on how to stage/unstage/add shown in the output of
    ## `git-status` and the template shown when writing commit messages. Default
    ## is true.
    statusHints = true

    ## Advice shown when `git-merge` refuses to merge to avoid overwriting local
    ## changes. Default is true.
    commitBeforeMerge = true

    ## Advices shown by various commands when conflicts prevent the operation
    ## from being performed.
    resolveConflict = true

    ## Advice on how to set your identity configuration when your information is
    ## guessed from the system username and domain name. Default is true.
    implicitIdentity = true

    ## Advice shown when you used `git-checkout` to move to the detach HEAD.
    ## Default is true.
    detachedHead = true

[alias]
    ## A shortcut to amend to the previous commit.
    amend = commit --amend

    ## List branches.
    branches = branch --all

    ## List the files that have changed.
    changed = diff --name-only

    ## List the files that have changed, and the status of these files.
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    changes = diff --name-status

    ## Show list of files in a conflict state.
    ##
    ## @link http://github.com/jacobwg/dotfiles/blob/master/bin/git-conflicts
    conflicts = ls-files --unmerged | awk '{print $4}' | sort --unique

    ## Count commits by author.
    count = shortlog --summary --numbered

    ## See the changes in a branch since it was forked from another branch, or
    ## since the last merge with the origin branch.
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    forkdiff = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -

    ## Produces a graphical `git log`.
    ##
    ## <code>
    ## git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
    ## </code>
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

    ## List all new commits after you fetched, with stats, but excluding merges.
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    lc = log ORIG_HEAD.. --stat --no-merges

    ## An alternative to `git log` with the following features:
    ##     - one commit per line
    ##     - show graph of commits
    ##     - abbreviated commit IDs
    ##     - dates relative to now
    ##     - show commit references (like `git log --decorate`)
    ##     - lots of color
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    ## List files that are not under version control.
    ##
    ## @link http://github.com/cypher/dotfiles/blob/master/gitconfig
    ls-ignored = ls-files --exclude-standard --ignored --others

    ## Prune all stale remote branches.
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    prune-all = !git remote | xargs -n 1 git remote prune

    ## List remotes.
    remotes = remote --verbose

    ## Serve repository on the spot.
    ##
    ## @link http://git.wiki.kernel.org/index.php/Aliases
    serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git

    ## List tags.
    tags = tag --list

    ## Attempt to cleanup some common problems.
    unfuck = !git fsck && git prune-all && git gc --aggressive --auto

    ## @link http://git.wiki.kernel.org/index.php/Aliases
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

    ## @link http://git.wiki.kernel.org/index.php/Aliases
    whois = !sh -c 'git log --regexp-ignore-case -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -

    ## Aliases for {@link http://github.com/defunkt/hub hub}. @{{{
        browse = !hub browse
        compare = !hub compare
        create = !hub create
        fork = !hub fork
        pull-request = !hub pull-request
    ## @}}}

    ## Aliases for {@link http://github.com/joshuaspence/git-utils git-utils}.
    ## Required here only for tab-completion.
    ##
    ## @todo Do I need this here?
    ##
    ## @{{{
        forest = !git-forest
        publish-branch = !git-publish-branch
        rank-contributors = !git-rank-contributors
        show-merges = !git-show-merges
        wtf = !git-wtf
    ## @}}}

    ## Aliases for {@link http://github.com/rtomayko/git-sh git-sh}. Required
    ## here only for tab-completion.
    ##
    ## @todo Do I need this here?
    ##
    ## @{{{
        sh = !git-sh
    ## @}}}

    ## Aliases for {@link http://github.com/visionmedia/git-extras git-extras}.
    ## Required here only for tab-completion.
    ##
    ## @todo Do I need this here?
    ##
    ## @{{{
        alias = !git-alias
        back = !git-back
        bug = !git-bug
        changelog = !git-changelog
        commits-since = !git-commits-since
        contrib = !git-contrib
        count = !git-count
        create-branch = !git-create-branch
        delete-branch = !git-delete-branch
        delete-merged-branches = !git-delete-merged-branches
        delete-submodule = !git-delete-submodule
        delete-tag = !git-delete-tag
        effort = !git-effort
        extras = !git-extras
        feature = !git-feature
        fresh-branch = !git-fresh-branch
        gh-pages = !git-gh-pages
        graft = !git-graft
        ignore = !git-ignore
        info = !git-info
        local-commits = !git-local-commits
        obliterate = !git-obliterate
        pull-request = !git-pull-request
        refactor = !git-refactor
        release = !git-release
        rename-tag = !git-rename-tag
        repl = !git-repl
        setup = !git-setup
        show-tree = !git-show-tree
        squash = !git-squash
        summary = !git-summary
        touch = !git-touch
        undo = !git-undo
    ## @}}}

[apply]
    whitespace = fix,error

[branch]
    ## Tells `git branch` and `git checkout` to set up new branches so that
    ## `git-pull` will appropriately merge from the starting point branch.
    ## Default is true.
    autosetupmerge = true

    ## When a new branch is created with `git branch` or `git checkout` that
    ## tracks another branch, this variable tells `git` to set up pull to rebase
    ## instead of merge. When never, rebase is never automatically set to true.
    ## When local, rebase is set to true for tracked branches of other local
    ## branches. When remote, rebase is set to true for tracked branches of
    ## remote branches. When always, rebase will be set to true for all tracking
    ## branches. Default is never.
    autosetuprebase = never

[color]
    branch = auto
    diff = auto
    grep = auto
    interactive = auto
    pager = true
    sh = auto
    showbranch = auto
    status = auto
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
    plain = normal
[color "diff"]
    plain = normal
    meta = yellow bold
    frag = magenta bold
    func = normal
    old = red bold
    new = green bold
    commit = normal
    whitespace = normal
[color "grep"]
    context = normal
    filename = normal
    function = normal
    linenumber = normal
    match = green
    selected = normal
    separator = normal
[color "interactive"]
    prompt = red
    header = normal
    help = green
    error = red
[color "sh"]
    branch = yellow reverse
    workdir = blue bold
    dirty = red
    dirty-stash = red
    repo-state = red
[color "status"]
    header = normal
    added = yellow
    changed = green
    untracked = cyan
    nobranch = red

[commit]
    ## A boolean to enable/disable inclusion of status information in the commit
    ## message template when using an editor to prepare the commit message.
    status = true

[core]
    ## If true, makes git convert CRLF at the end of lines in text files to LF
    ## when reading from the work tree, and convert in reverse when writing to
    ## the work tree. The variable can be set to "input", in which case the
    ## conversion happens only while reading from the work tree but files are
    ## written out to the work tree with LF at the end of lines.
    autocrlf = input

    ## If true, makes git check if converting CRLF as controlled by
    ## `core.autocrlf` is reversible. git will verify if a command modifies a
    ## file in the work tree either directly or indirectly. For example,
    ## committing a file followed by checking out the same file should yield the
    ## original file in the work tree. If this is not the case for the current
    ## setting of `core.autocrlf`, git will reject the file. The variable can be
    ## set to "warn", in which case git will only warn about an irreversible
    ## conversion but continue the operation.
    safecrlf = warn

    ## If false, symbolic links are checked out as small plain files that
    ## contain the link text. `git-update-index` and `git-add` will not change
    ## the recorded type to regular file. Useful on filesystems like FAT that do
    ## not support symbolic links.
    #symlinks = true

    ## In addition to `.gitignore` (per-directory) and `.git/info/exclude`,
    ## git looks into this file for patterns of files which are not meant to be
    ## tracked.
    excludesfile = ~/.gitignore

    ## A comma separated list of common whitespace problems to notice.
    ## `git diff` will use `color.diff.whitespace` to highlight them, and
    ## `git apply --whitespace=error` will consider them as errors.
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space,cr-at-eol


[diff]
    ## If set, `git diff` uses a prefix pair that is different from the standard
    ## "a/" and "b/" depending on what is being compared.
    mnemonicprefix = true

    ## Tells git to detect renames. If set to any boolean value, it will enable
    ## basic rename detection. If set to "copies" or "copy", it will detect
    ## copies, as well.
    renames = copy

    ## A boolean to inhibit the standard behavior of printing a space before
    ## each empty output line.
    suppressBlankEmpty = true

    ## Controls which diff tool is used.
    tool = meld

[difftool]
    ## Prompt before each invocation of the diff tool.
    prompt = false

[help]
    ## Override the default help format used by `git-help`. Values "man",
    ## "info", "web" and "html" are supported.
    format = web

    ## Automatically correct and execute mistyped commands after waiting for the
    ## given number of deciseconds (0.1 sec). If more than one command can be
    ## deduced from the entered text, nothing will be executed. If the value of
    ## this option is negative, the corrected command will be executed
    ## immediately. If the value is 0, the command will be just shown but not
    ## executed (this is the default).
    autocorrect = 0

[man]
    ## Specify the programs that may be used to display help in the man format.
    viewer = man

[merge]
    ## Whether to print the diffstat between ORIG_HEAD and the merge result at
    ## the end of the merge.
    stat = true

    ## Controls which merge resolution program is used by `git-mergetool`.
    tool = meld

    ## Controls the amount of output shown by the recursive merge strategy.
    ## Level 0 outputs nothing except a final error message if conflicts were
    ## detected. Level 1 outputs only conflicts, 2 outputs conflicts and file
    ## changes. Level 5 and above outputs debugging information. The default is
    ## level 2.
    verbosity = 2

[mergetool]
    ## After performing a merge, the original file with conflict markers can be
    ## saved as a file with a ".orig" extension. If this variable is set to
    ## false then this file is not preserved.
    keepBackup = false

    ## Prompt before each invocation of the merge resolution program.
    prompt = false

[push]
    ## Defines the action `git push` should take if no refspec is given on the
    ## command line, no refspec is configured in the remote, and no refspec is
    ## implied by any of the options given on the command line.
    default = matching

[rerere]
    ## Remember my merges.
    ##
    ## @link http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
    enabled = true

[status]
    ## By default, `git-status` and `git-commit` show files which are not
    ## currently tracked by Git. Directories which contain only untracked files,
    ## are shown with the directory name only. Showing untracked files means
    ## that Git needs to `lstat` all all the files in the whole repository,
    ## which might be slow on some systems. So, this variable controls how the
    ## commands displays the untracked files.
    showUntrackedFiles = normal

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gist:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"

[url "git@heroku.com:"]
    insteadOf = "heroku:"

[url "git@gitorious.org:"]
    pushInsteadOf = git://gitorious.org/

[web]
    ## Specify the browser that will be used to display help in the web format.
    browser = google-chrome
