import os
import sys

if sys.version_info.major < 3:
  try:
    import readline
  except ImportError as e:
    sys.stderr.write(e)
    sys.stderr.write('Module readline not available. Tab completion is disabled.\n')
  else:
    import rlcompleter
    readline.parse_and_bind('tab: complete')

    class Completer(rlcompleter.Completer):
      '''Identical to `rlcompleter.Completer` except that a "tab" insertion
      is enabled if there's no text for completion.

      The default "tab" is four spaces. You can initialize this class with
      "\t" as the tab if you wish to use a genuine tab instead.
      '''

      def __init__(self, tab='  '):
        self.tab = tab
        rlcompleter.Completer.__init__(self)

      def complete(self, text, state):
        if text == '':
          readline.insert_text(self.tab)
          return None
        else:
          return rlcompleter.Completer.complete(self, text, state)

    readline.set_completer(Completer().complete)

try:
  import readline
except ImportError:
  sys.stderr.write('Module readline not available. Command-line history is disabled.\n')
else:
  pyhistory = os.path.expanduser('~/.python_history')

  # Restore command-line history.
  if os.path.isfile(pyhistory):
    readline.read_history_file(pyhistory)

  # Save command-line history when Python exits.
  try:
    import atexit
  except ImportError:
    sys.stderr.write('Module atexit not availabkeCommand-line history will not be saved when Python exits.\n')
  else:
    atexit.register(readline.write_history_file, pyhistory)

  readline.set_history_length(1048576)
