"===============================================================================
" General
"===============================================================================

" Behave like `vim` instead of `vi`.
set nocompatible

" We plan to use a dark background.
set background=dark

" Vim can detect file types (by their extension, or by peeking inside the file).
filetype plugin indent on

" Vundle bundles.
source ~/.vim/bundles.vim

" Turn on color syntax highlighting.
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" When a file has been detected to have been changed outside of Vim and it has
" not been changed inside of `vim`, automatically read it again.
set autoread

" This will save the file when you switch buffers.
set autowrite

" Use UTF-8 without BOM.
set encoding=utf-8 nobomb

" Allow cursor keys in insert mode.
set esckeys

" Wrap at 80 chars by default.
set textwidth=80

" Don't clear the screen when exiting `vim`.
" @link http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" Support for numbered/bullet lists.
set formatoptions+=n

set viewoptions=folds,options,cursor,unix,slash


"===============================================================================
" Appearance
"===============================================================================

" Highlight the current column.
set cursorcolumn

" Highlight the current line.
set cursorline

" Show line numbers.
set number

" Use relative line numbers.
"set relativenumber

" Show the ruler.
set ruler

" Don't wrap lines.
set nowrap

" Visual bell.
set visualbell

" Don't update while in macro.
set lazyredraw

" Optimize for fast terminal connections. Sends more characters for redraws.
" Improves redrawing.
set ttyfast

" Display current column/line.
set rulerformat=%l,%c ruler

" Show commands at bottom right.
set showcmd

" Split windows below current window.
set splitbelow

" Window minimum height.
set winminheight=1

" Always have at least 8 lines before the window's bottom.
set scrolloff=8

" Folding.
if has("folding")
  set foldcolumn=3
  set foldenable
  set foldmethod=syntax
  set foldlevel=1
  set foldnestmax=2
  set foldlevelstart=99
endif

" Show the filename title in xterms.
set title

" Nice statusbar.
set laststatus=2
set statusline=
set statusline+=%F          " full path to file in the buffer
set statusline+=%m          " modified flag in square brackets
set statusline+=%r          " readonly flag in square brackets
set statusline+=%h          " help flag in square brackets
set statusline+=%w          " preview flag in square brackets
set statusline+=%=          " right align
set statusline+=[%L]        " number of lines
set statusline+=[%{&ff}]    " current fileformat
set statusline+=%y          " current syntax in square brackets
set statusline+=[%p%%]      " current % into file
set statusline+=[%04l,%04v] " current row, current column

" Don't highlight minified js and stuff.
set synmaxcol=500

"===============================================================================
" Search & Replace
"===============================================================================

" Highlight searches.
set hlsearch

" Make searches case-insensitive, unless they contain upper-case letters.
set ignorecase smartcase

" Show the "best match so far" as search strings are typed.
set incsearch

" Assume the /g flag on :s substitutions to replace all matches in a line.
set gdefault

set showmatch matchtime=5

"===============================================================================
" Whitespace settings
"===============================================================================

" Use multiple of shiftwidth when indenting with '<' and '>'.
set shiftround

" Highlight unwanted spaces.
set list listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_

" Copy the previous indentation on autoindenting.
set copyindent

" Insert tabs on the start of a line according to shiftwidth, not tabstop.
set smarttab

" When hitting tab or backspace, how many spaces should a tab be (see
" expandtab).
set tabstop=4 shiftwidth=4 softtabstop=4

" Always set autoindenting on.
set autoindent smartindent

" Expand tabs to space.
set expandtab

"===============================================================================
" Menu completions
"===============================================================================

" Command-line tab completion.
set wildmode=full wildmenu

" Auto-complete in `vim`.
set infercase

" The popup menu doesn't select the first completion item, but rather just
" inserts the longest common text of all matches; and the menu will come up even
" if there's only one match.
set complete=.,w,b,u,t completeopt=longest,menu,menuone,preview

" `vim` will ignore file patterns specified in option "wildignore".
set wildignore+=*.bmp,*.gif,*.jpg,*.jpeg,*.png     " binary images
set wildignore+=*.class,classes,*.luac,*.pyc,*.rbc " byte code and stuff
set wildignore+=*.dll,*.exe,*.manifest,*.o,*.obj   " compiled object files
set wildignore+=*.aux,*.out,*.toc                  " LaTeX intermediate files
set wildignore+=.bzr,.git,.hg,.svn                 " version control
set wildignore+=*.sw?                              " vim swap files

"===============================================================================
" GUI Stuff
"===============================================================================

" Enable mouse support.
set mousemodel=extend
set selectmode=mouse
set mouse=a
"set ttymouse=xterm2

" Mouse can control splits.
if has("gui_running")
  set mousefocus
endif

"===============================================================================
" Keystrokes
"===============================================================================

" Backspace over anything.
set backspace=indent,eol,start

" Space is so much easier than ':'.
noremap <space> :

" Remap <LEADER> to ',' (instead of '\').
let mapleader=","

" Have the 'h' and 'l' cursor keys wrap between lines, and '~'' covert case over
" line breaks; also have the cursor keys wrap in insert mode.
set whichwrap=h,l,~,[,]

" Show a list of recently opened files.
nmap ,r :FuzzyFinderMruFile</cr><cr>

" Show a list of files to be regex matched.
nmap ,f :FuzzyFinderTextMate</cr><cr>

" Task list bindings.
let Tlist_WinWidth = 50
map </cr></silent><silent> ,T :TaskList<cr>

" Tag list.
map </cr></silent><silent> ,t :Tlist<cr>

" Joining lines.
noremap ,j :join</cr><cr>

" Change tabs with 'shift+tab'.
nnoremap <s-tab> <c-w>w;

" Scrolling.
no J 20j
no K 20k

" List whitespace.
nn </c-w></s-tab></cr></silent><silent> ,</silent></bkspc></space><space> :se nolist!<cr>

" Buffer window focus.
nn ,k <c-w>k</c-w><c-w>_
nn ,= </c-w><c-w>=

" ,nn will toggle NERDTree on and off.
nmap ,nn :NERDTreeToggle</cr><cr>

" @link http://vimrc-dissection.blogspot.com.au/2009/02/fixing-pageup-and-pagedown.html
map <PageUp> <C-U>
map <PageDown> <C-D>
imap <PageUp> <C-O><C-U>
imap <PageDown> <C-O><C-D>
set nostartofline

"===============================================================================
" Tabs
"===============================================================================

" Open 50 tabs max.
set tabpagemax=50

" you can switch to the next buffer by pressing F8, or the previous buffer by pressing Shift-F8. If the target buffer is already displayed in a window in one of the tabs, that window will be displayed. Otherwise, the current window will be split, and the target buffer will be displayed in the new window.
set switchbuf=usetab
nnoremap <F8> :sbnext<CR>
nnoremap <S-F8> :sbprevious<CR>

" Duplicate current tab with same file and line.
map ,t :tabnew %<CR>

" Open directory dirname of current file, and in new tab.
map ,d :e %:h/<CR>
map ,dt :tabnew %:h/<CR>

" Open gf under cursor in new tab.
map ,f :tabnew <cfile><CR>

" Open tag under cursor in new tab.
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

"===============================================================================
" Spelling
"===============================================================================

set dictionary=/usr/share/dict/words
if v:version >= 700
  setlocal spell spelllang=en
  nmap ,ll :set spell!</cr><cr>
  nmap ,le :set spelllang=en</cr><cr>
  nmap ,lp :set spelllang=pt</cr><cr>
endif

" Correct some spelling mistakes.
ia teh      the
ia htis     this
ia tihs     this
ia funciton function
ia fucntion function
ia funtion  function
ia retunr   return
ia reutrn   return
ia sefl     self
ia eslf     self

"===============================================================================
" Backup options
"===============================================================================

" Don't keep backups.
set backupdir=~/tmp,/tmp
set nobackup
set nowritebackup

"===============================================================================
" Swap options
"===============================================================================

" Don't use swap files.
set directory=~/tmp,/tmp
set noswapfile

"===============================================================================
" Undo options
"===============================================================================

" Use the persistent undo feature. NOTE: the directory listed in undodir must
" exist; Vim will not create this directory itself!
set undodir=~/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

"===============================================================================
" History options
"===============================================================================

" Number of lines of command line history to keep.
set history=1000

"===============================================================================
" Clipboard Management
"===============================================================================

" Use the OS clipboard by default.
set clipboard+=unnamed

" Use smart paste for preserving identation when copying and pasting.
nmap <silent> ,p :SmartPaste</silent></esc></cr><cr>
nmap <silent> ,p :SmartPaste<cr>

" Make sure paste mode is on before pasting.
function! SmartPaste()
  set paste
  normal! p`[=`]
  set nopaste
endfunction

"===============================================================================
" Other
"===============================================================================

"source ~/.vim/bindings.vim
"source ~/.vim/autocmd.vim

"===============================================================================
" Functions
"===============================================================================

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>
