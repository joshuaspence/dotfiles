#!/bin/sh

##
# TODO
#
iface() {
    case $(uname -s) in
        Darwin)
            netstat -nr | grep ^default | grep -v 'link#' | awk '{print $6}'
            return 0
            ;;
        OpenBSD)
            netstat -nr | grep ^default | awk '{print $8}'
            return 0
            ;;
        Linux)
            netstat -nr | grep ^0\.0\.0\.0 | awk '{print $8}'
            return 0
            ;;
        SunOS)
            local def_gateway=$(netstat -nr | grep ^default | awk '{print $2}')
            route get $def_gateway | \ grep '^[ ]*interface:' | awk '{print $2}'
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

##
# Returns the primary IP address of the system.
#
# @link https://github.com/fnichol/bashrc/blob/master/bashrc
#
whats_my_primary_ip() {
    case $(uname -s) in
        Darwin)
            ifconfig $(iface) | grep '^[[:space:]]*inet ' | awk '{print $2}'
            return 0
            ;;
        OpenBSD)
            ifconfig $(iface) | grep '^[[:space:]]*inet ' | awk '{print $2}'
            return 0
            ;;
        Linux)
            /sbin/ifconfig $(iface) | grep '^[[:space:]]*inet ' | awk '{print $2}' | awk -F':' '{print $2}'
            return 0
            ;;
        SunOS)
            ifconfig $(iface) | awk '/^\t*inet / {print $2}'
            return 0
            ;;
        *)
            echo "Could not determine primary IP address" >&2
            return 1
    esac
}

##
# Determines the primary hostname of another domain name. Often used to resolve
# a website url (like "www.example.com") to a server hostname (like
# "webserver1.domainhosting.com").
#
# @params [String] Domainname to look up.
#
# @link https://github.com/fnichol/bashrc/blob/master/bashrc
#
hostfromdomain() {
    if [ -z $1 ]; then
        echo "usage: hostfromdomain <domainname>" >&2
        return 1
    else
        dig -x $(dig $1 +short) +short
    fi
}

##
# Returns the remote user's public SSH key on STDOUT. The host can optionally
# contain the username (like "jdoe@ssh.example.com") and a non-standard port
# number (like "ssh.example.com:666").
#
# @param [String] Remote ssh host in for form of [<user>@]host[:<port>].
# @param [String] Path to the remote public key.
#
# @todo Test this!!!
#
mysshkey() {
    if [ -z $1 ] ; then
        echo "Usage: mysshkey <ssh_host> <pub_key>" >&2
        return 1
    fi

    local host=$1
    local key=$2

    if echo $host | egrep -q ':'; then
        local ssh_cmd="$(echo $host | awk -F':' '{print \"ssh -p \" $2 \" \" $1}')"
    else
        local ssh_cmd="ssh $host"
    fi

    $ssh_cmd "(cat .ssh/$key)"
}

##
# Places a given public ssh key on a remote host for key-based authentication.
# The host can optionally contain the username (like "jdoe@ssh.example.com")
# and a non-standard port number (like "ssh.example.com:666").
#
# @param [String] Remote ssh host in for form of [<user>@]host[:<port>].
# @param [String] Path to the public key.
#
# @todo Test this!!!
#
authme() {
    if [ -z $1 ] ; then
        echo "Usage: authme <ssh_host> <public_key>" >&2
        return 1
    fi

    local host=$1
    local key=$2

    if [ ! -f $key ]; then
        echo "SSH key: $key does not exist."
        return 2
    fi

    if echo $host | egrep -q ':'; then
        local ssh_cmd="$(echo $host | awk -F':' '{print \"ssh -p \" $2 \" \" $1}')"
    else
        local ssh_cmd="ssh $host"
    fi

    $ssh_cmd '([ -d $HOME/.ssh ] || mkdir -m 0700 -p $HOME/.ssh; \
        cat - >> $HOME/.ssh/authorized_keys)' < $key
}
