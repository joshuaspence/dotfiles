##
# Checks whether a website is down for you, or everybody.
#
# @param [String] The URL.
#
down4me() {
    curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

myip ()
{
    about 'displays your ip address, as seen by the Internet'
    group 'base'
    res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
    echo -e "Your public IP is: ${echo_bold_green} $res ${echo_normal}"
}

##
# Returns the primary IP address of the system.
function whatsmy_primary_ip() {
    local def_gateway=
    local iface=
    local ip=

    case $(os) in
        Darwin)
            iface=$(netstat -nr | grep ^default | grep -v 'link#' | awk '{print $6}')
            ip=$(ifconfig $_if | grep '^[[:space:]]*inet ' | awk '{print $2}')
            ;;
        OpenBSD)
            iface=$(netstat -nr | grep ^default | awk '{print $8}')
            ip=$(ifconfig $_if | grep '^[[:space:]]*inet ' | awk '{print $2}')
            ;;
        Linux)
            iface=$(netstat -nr | grep ^0\.0\.0\.0 | awk '{print $8}')
            ip=$(/sbin/ifconfig $_if | grep '^[[:space:]]*inet ' | awk '{print $2}' | awk -F':' '{print $2}')
            ;;
        SunOS)
            def_gateway=$(netstat -nr | grep ^default | awk '{print $2}')
            iface=$(route get $_def_gateway | \ grep '^[ ]*interface:' | awk '{print $2}')
            ip=$(ifconfig $_if |  awk '/^\t*inet / {print $2}')
            ;;
    esac

    if [[ -z $ip || $ip == "" ]]; then
        echo "Could not determine primary IP address" >&2
        return 10
    else
        echo $ip
    fi
}

##
# Determines the primary hostname of another domain name. Often used to resolve
# a website url (like `www.example.com') to a server hostname (like
# `webserver1.domainhosting.com').
#
# @params [String] Domainname to look up.
function hostfromdomain() {
    if command -v dig >/dev/null; then
        [[ -z "$1" ]] && printf "usage: hostfromdomain <domainname>\n" && return 11
        dig -x $(dig $1 +short) +short
    else
        echo "dig command not available" >&2
        return 5
    fi
}

##
# Returns the public/internet visible IP address of the system.
#
# @link https://twitter.com/#!/mojombo/status/48948402955882496
function whatsmy_public_ip() {
    curl --silent 'http://jsonip.com/' | json_val '["ip"]'
}

##
# Return current external IP address.
function whatismyip() {
    curl --silent checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//'
}

##
# Returns the remote user's public SSH key on STDOUT. The host can optionally
# contain the username (like `jdoe@ssh.example.com') and a non-standard port
# number (like `ssh.example.com:666').
#
# @param [String] remote ssh host in for form of [<user>@]host[:<port>]
# @param [String] remote public key, using id_dsa.pub by default
function mysshkey() {
    if [ -z "$1" ] ; then
        echo "Usage: mysshkey <ssh_host> [<pub_key>]" >&2
        return $RETURN_INVALID_CALL
    fi

    local host="$1" ; shift
    if [ -z "$1" ] ; then
        local key="id_dsa.pub"
    else
        local key="$1"
    fi
    shift

    if echo "$host" | egrep -q ':' ; then
        local ssh_cmd=$(echo $host | awk -F':' '{print \"ssh -p \" $2 \" \" $1}')
    else
        local ssh_cmd="ssh $host"
    fi

    $ssh_cmd "(cat .ssh/$key)"
}

##
# Places a given public ssh key on a remote host for key-based authentication.
# The host can optionally contain the username (like `jdoe@ssh.example.com')
# and a non-standard port number (like `ssh.example.com:666').
#
# @param [String] remote ssh host in for form of [<user>@]host[:<port>]
# @param [String] public key, using $HOME/.ssh/id_dsa.pub by default
function authme() {
    if [ -z "$1" ] ; then
        echo "Usage: authme <ssh_host> [<pub_key>]" >&2
        return $RETURN_INVALID_CALL
    fi

    local host="$1" ; shift
    if [ -z "$1" ] ; then
        local key="${HOME}/.ssh/id_dsa.pub"
    else
        local key="$1"
    fi
    shift

    [[ ! -f "$key" ]] && echo "SSH key: $key does not exist." && return 11

    if echo "$host" | egrep -q ':' ; then
        local ssh_cmd="$(echo $host | awk -F':' '{print \"ssh -p \" $2 \" \" $1}')"
    else
        local ssh_cmd="ssh $host"
    fi

    $ssh_cmd '(if [ ! -d "${HOME}/.ssh" ]; then \
        mkdir -m 0700 -p ${HOME}/.ssh; fi; \
        cat - >> .ssh/authorized_keys)' < $key
}
