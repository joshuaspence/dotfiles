#===============================================================================
# File: ~/.gitconfig
# Author: Joshua Spence <josh@joshuaspence.com>
#===============================================================================
# Configuration file for Git.
#-------------------------------------------------------------------------------

[user]
    name = Joshua Spence
    email = josh@joshuaspence.com
[include]
    path = .gituser
[core]
    editor = vim
    excludesfile = ~/.gitignore										# In addition to .gitignore (per-directory) and .git/info/exclude, git looks into this file for patterns of files which are not meant to be tracked
    whitespace = trailing-space, space-before-tab, -indent-with-non-tab, tabwidth=4
[apply]
    whitespace = fix, error
[alias]
    gitkconflict = !gitk --left-right HEAD...MERGE_HEAD				# show conflicting merge in gitk
    prune-all = !git remote | xargs -n 1 git remote prune			# prune all tracking local branches that have been removed from remote
    history-all = !gitk --all $( git fsck | awk '/dangling commit/ {print $3}' ) # show full history in gitk (including "deleted" branches and stashes)
    rank = shortlog -sn --no-merges									# show list of contributors in descending order by number of commits
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -" # given a string for an author, try to figure out full name and email
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short	# given any git object, try to show it briefly

	# Example: search commits for "foobar", print full diff of commit with 1 line context (git searchcommits foobar --pickaxe-all -U1 src/lib)    
    searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\"" # Search for a given string in all patches and print commit messages
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    
    # Examples:
	# git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
	# git graphviz --first-parent master | dotty /dev/stdin
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
    
    unstage = reset HEAD --
    tag = tag -a
[color]
    diff = auto
    interactive = auto
    status = auto
    branch = auto
    ui = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[interactive]
    singlekey = true												# In interactive commands, allow the user to provide one-letter input with a single key (i.e., without hitting enter)
[diff]
    renames = copy													# Tells git to detect renames
